// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: antibruteforce.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AntiBruteforceClient is the client API for AntiBruteforce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntiBruteforceClient interface {
	AllowRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ClearBucket(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddToBlackList(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*Response, error)
	AddToWhiteList(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*Response, error)
	RemoveFromBlackList(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*Response, error)
	RemoveFromWhiteList(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*Response, error)
}

type antiBruteforceClient struct {
	cc grpc.ClientConnInterface
}

func NewAntiBruteforceClient(cc grpc.ClientConnInterface) AntiBruteforceClient {
	return &antiBruteforceClient{cc}
}

func (c *antiBruteforceClient) AllowRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/service.AntiBruteforce/AllowRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) ClearBucket(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/service.AntiBruteforce/ClearBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) AddToBlackList(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/service.AntiBruteforce/AddToBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) AddToWhiteList(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/service.AntiBruteforce/AddToWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) RemoveFromBlackList(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/service.AntiBruteforce/RemoveFromBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) RemoveFromWhiteList(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/service.AntiBruteforce/RemoveFromWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntiBruteforceServer is the server API for AntiBruteforce service.
// All implementations must embed UnimplementedAntiBruteforceServer
// for forward compatibility
type AntiBruteforceServer interface {
	AllowRequest(context.Context, *Request) (*Response, error)
	ClearBucket(context.Context, *Request) (*Response, error)
	AddToBlackList(context.Context, *Subnet) (*Response, error)
	AddToWhiteList(context.Context, *Subnet) (*Response, error)
	RemoveFromBlackList(context.Context, *Subnet) (*Response, error)
	RemoveFromWhiteList(context.Context, *Subnet) (*Response, error)
	mustEmbedUnimplementedAntiBruteforceServer()
}

// UnimplementedAntiBruteforceServer must be embedded to have forward compatible implementations.
type UnimplementedAntiBruteforceServer struct {
}

func (UnimplementedAntiBruteforceServer) AllowRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowRequest not implemented")
}
func (UnimplementedAntiBruteforceServer) ClearBucket(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearBucket not implemented")
}
func (UnimplementedAntiBruteforceServer) AddToBlackList(context.Context, *Subnet) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlackList not implemented")
}
func (UnimplementedAntiBruteforceServer) AddToWhiteList(context.Context, *Subnet) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhiteList not implemented")
}
func (UnimplementedAntiBruteforceServer) RemoveFromBlackList(context.Context, *Subnet) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromBlackList not implemented")
}
func (UnimplementedAntiBruteforceServer) RemoveFromWhiteList(context.Context, *Subnet) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromWhiteList not implemented")
}
func (UnimplementedAntiBruteforceServer) mustEmbedUnimplementedAntiBruteforceServer() {}

// UnsafeAntiBruteforceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntiBruteforceServer will
// result in compilation errors.
type UnsafeAntiBruteforceServer interface {
	mustEmbedUnimplementedAntiBruteforceServer()
}

func RegisterAntiBruteforceServer(s grpc.ServiceRegistrar, srv AntiBruteforceServer) {
	s.RegisterService(&AntiBruteforce_ServiceDesc, srv)
}

func _AntiBruteforce_AllowRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).AllowRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AntiBruteforce/AllowRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).AllowRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_ClearBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).ClearBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AntiBruteforce/ClearBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).ClearBucket(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_AddToBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subnet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).AddToBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AntiBruteforce/AddToBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).AddToBlackList(ctx, req.(*Subnet))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_AddToWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subnet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).AddToWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AntiBruteforce/AddToWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).AddToWhiteList(ctx, req.(*Subnet))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_RemoveFromBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subnet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).RemoveFromBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AntiBruteforce/RemoveFromBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).RemoveFromBlackList(ctx, req.(*Subnet))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_RemoveFromWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subnet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).RemoveFromWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AntiBruteforce/RemoveFromWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).RemoveFromWhiteList(ctx, req.(*Subnet))
	}
	return interceptor(ctx, in, info, handler)
}

// AntiBruteforce_ServiceDesc is the grpc.ServiceDesc for AntiBruteforce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntiBruteforce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.AntiBruteforce",
	HandlerType: (*AntiBruteforceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllowRequest",
			Handler:    _AntiBruteforce_AllowRequest_Handler,
		},
		{
			MethodName: "ClearBucket",
			Handler:    _AntiBruteforce_ClearBucket_Handler,
		},
		{
			MethodName: "AddToBlackList",
			Handler:    _AntiBruteforce_AddToBlackList_Handler,
		},
		{
			MethodName: "AddToWhiteList",
			Handler:    _AntiBruteforce_AddToWhiteList_Handler,
		},
		{
			MethodName: "RemoveFromBlackList",
			Handler:    _AntiBruteforce_RemoveFromBlackList_Handler,
		},
		{
			MethodName: "RemoveFromWhiteList",
			Handler:    _AntiBruteforce_RemoveFromWhiteList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "antibruteforce.proto",
}
